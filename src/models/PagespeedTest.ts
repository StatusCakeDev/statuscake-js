/* tslint:disable */
/* eslint-disable */
/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

import { exists, mapValues } from '../runtime';
import {
  PagespeedTestCheckRate,
  PagespeedTestCheckRateFromJSON,
  PagespeedTestCheckRateFromJSONTyped,
  PagespeedTestCheckRateToJSON,
} from './PagespeedTestCheckRate';
import {
  PagespeedTestStats,
  PagespeedTestStatsFromJSON,
  PagespeedTestStatsFromJSONTyped,
  PagespeedTestStatsToJSON,
} from './PagespeedTestStats';

/**
 *
 * @export
 * @interface PagespeedTest
 */
export interface PagespeedTest {
  /**
   * Pagespeed check ID
   * @type {string}
   * @memberof PagespeedTest
   */
  id: string;
  /**
   * Name of the check
   * @type {string}
   * @memberof PagespeedTest
   */
  name: string;
  /**
   * URL or IP address of the website under test
   * @type {string}
   * @memberof PagespeedTest
   */
  websiteUrl: string;
  /**
   *
   * @type {PagespeedTestCheckRate}
   * @memberof PagespeedTest
   */
  checkRate: PagespeedTestCheckRate;
  /**
   * An alert will be sent if the size of the page is larger than this value (kb). A value of 0 prevents alerts being sent.
   * @type {number}
   * @memberof PagespeedTest
   */
  alertBigger: number;
  /**
   * An alert will be sent if the load time of the page exceeds this value (ms). A value of 0 prevents alerts being sent
   * @type {number}
   * @memberof PagespeedTest
   */
  alertSlower: number;
  /**
   * An alert will be sent if the size of the page is smaller than this value (kb). A value of 0 prevents alerts being sent
   * @type {number}
   * @memberof PagespeedTest
   */
  alertSmaller: number;
  /**
   * List of contact group IDs
   * @type {Array<string>}
   * @memberof PagespeedTest
   */
  contactGroups: Array<string>;
  /**
   *
   * @type {PagespeedTestStats}
   * @memberof PagespeedTest
   */
  latestStats?: PagespeedTestStats;
  /**
   * Assigned monitoring location on which checks will be run
   * @type {string}
   * @memberof PagespeedTest
   */
  location: string;
  /**
   * Whether the check should be run
   * @type {boolean}
   * @memberof PagespeedTest
   */
  paused: boolean;
}

export function PagespeedTestFromJSON(json: any): PagespeedTest {
  return PagespeedTestFromJSONTyped(json, false);
}

export function PagespeedTestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PagespeedTest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    websiteUrl: json['website_url'],
    checkRate: PagespeedTestCheckRateFromJSON(json['check_rate']),
    alertBigger: json['alert_bigger'],
    alertSlower: json['alert_slower'],
    alertSmaller: json['alert_smaller'],
    contactGroups: json['contact_groups'],
    latestStats: !exists(json, 'latest_stats')
      ? undefined
      : PagespeedTestStatsFromJSON(json['latest_stats']),
    location: json['location'],
    paused: json['paused'],
  };
}

export function PagespeedTestToJSON(value?: PagespeedTest | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    website_url: value.websiteUrl,
    check_rate: PagespeedTestCheckRateToJSON(value.checkRate),
    alert_bigger: value.alertBigger,
    alert_slower: value.alertSlower,
    alert_smaller: value.alertSmaller,
    contact_groups: value.contactGroups,
    latest_stats: PagespeedTestStatsToJSON(value.latestStats),
    location: value.location,
    paused: value.paused,
  };
}
