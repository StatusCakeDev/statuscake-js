/* tslint:disable */
/* eslint-disable */
/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.3
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

import { exists, mapValues } from '../runtime';
import {
  ContactGroup,
  ContactGroupFromJSON,
  ContactGroupFromJSONTyped,
  ContactGroupToJSON,
} from './ContactGroup';
import {
  Pagination,
  PaginationFromJSON,
  PaginationFromJSONTyped,
  PaginationToJSON,
} from './Pagination';

/**
 *
 * @export
 * @interface ContactGroups
 */
export interface ContactGroups {
  /**
   * List of contact groups
   * @type {Array<ContactGroup>}
   * @memberof ContactGroups
   */
  data: Array<ContactGroup>;
  /**
   *
   * @type {Pagination}
   * @memberof ContactGroups
   */
  metadata: Pagination;
}

export function ContactGroupsFromJSON(json: any): ContactGroups {
  return ContactGroupsFromJSONTyped(json, false);
}

export function ContactGroupsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ContactGroups {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    data: (json['data'] as Array<any>).map(ContactGroupFromJSON),
    metadata: PaginationFromJSON(json['metadata']),
  };
}

export function ContactGroupsToJSON(value?: ContactGroups | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    data: (value.data as Array<any>).map(ContactGroupToJSON),
    metadata: PaginationToJSON(value.metadata),
  };
}
