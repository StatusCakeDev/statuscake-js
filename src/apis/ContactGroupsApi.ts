/* tslint:disable */
/* eslint-disable */
/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

import * as runtime from '../runtime';
import {
  APIError,
  APIErrorFromJSON,
  APIErrorToJSON,
  APIResponse,
  APIResponseFromJSON,
  APIResponseToJSON,
  ContactGroupResponse,
  ContactGroupResponseFromJSON,
  ContactGroupResponseToJSON,
  ContactGroups,
  ContactGroupsFromJSON,
  ContactGroupsToJSON,
} from '../models';

export interface CreateContactGroupRequest {
  name: string;
  emailAddresses?: Array<string>;
  integrations?: Array<string>;
  mobileNumbers?: Array<string>;
  pingUrl?: string;
}

export interface DeleteContactGroupRequest {
  groupId: string;
}

export interface GetContactGroupRequest {
  groupId: string;
}

export interface ListContactGroupsRequest {
  page?: number;
  limit?: number;
}

export interface UpdateContactGroupRequest {
  groupId: string;
  name?: string;
  emailAddresses?: Array<string>;
  integrations?: Array<string>;
  mobileNumbers?: Array<string>;
  pingUrl?: string;
}

/**
 * ContactGroupsApi - interface
 *
 * @export
 * @interface ContactGroupsApiInterface
 */
export interface ContactGroupsApiInterface {
  /**
   * Creates a contact group with the given parameters.
   * @summary Create a contact group
   * @param {string} name Name of the contact group
   * @param {Array<string>} [emailAddresses] List of email addresses
   * @param {Array<string>} [integrations] List of integration IDs
   * @param {Array<string>} [mobileNumbers] List of international format mobile phone numbers
   * @param {string} [pingUrl] URL or IP address of an endpoint to push uptime events. Currently this only supports HTTP GET endpoints
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactGroupsApiInterface
   */
  createContactGroupRaw(
    requestParameters: CreateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<APIResponse>>;

  /**
   * Creates a contact group with the given parameters.
   * Create a contact group
   */
  createContactGroup(
    requestParameters: CreateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<APIResponse>;

  /**
   * Deletes a contact group with the given id.
   * @summary Delete a contact group
   * @param {string} groupId Contact group ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactGroupsApiInterface
   */
  deleteContactGroupRaw(
    requestParameters: DeleteContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Deletes a contact group with the given id.
   * Delete a contact group
   */
  deleteContactGroup(
    requestParameters: DeleteContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<void>;

  /**
   * Returns a contact group with the given id.
   * @summary Retrieve a contact group
   * @param {string} groupId Contact group ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactGroupsApiInterface
   */
  getContactGroupRaw(
    requestParameters: GetContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ContactGroupResponse>>;

  /**
   * Returns a contact group with the given id.
   * Retrieve a contact group
   */
  getContactGroup(
    requestParameters: GetContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<ContactGroupResponse>;

  /**
   * Returns a list of contact groups for an account.
   * @summary Get all contact groups
   * @param {number} [page] Page of results
   * @param {number} [limit] The number of contact groups to return per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactGroupsApiInterface
   */
  listContactGroupsRaw(
    requestParameters: ListContactGroupsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ContactGroups>>;

  /**
   * Returns a list of contact groups for an account.
   * Get all contact groups
   */
  listContactGroups(
    requestParameters: ListContactGroupsRequest,
    initOverrides?: RequestInit,
  ): Promise<ContactGroups>;

  /**
   * Updates a contact group with the given parameters.
   * @summary Update a contact group
   * @param {string} groupId Contact group ID
   * @param {string} [name] Name of the contact group
   * @param {Array<string>} [emailAddresses] List of email addresses
   * @param {Array<string>} [integrations] List of integration IDs
   * @param {Array<string>} [mobileNumbers] List of international format mobile phone numbers
   * @param {string} [pingUrl] URL or IP address of an endpoint to push uptime events. Currently this only supports HTTP GET endpoints
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactGroupsApiInterface
   */
  updateContactGroupRaw(
    requestParameters: UpdateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Updates a contact group with the given parameters.
   * Update a contact group
   */
  updateContactGroup(
    requestParameters: UpdateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<void>;
}

/**
 *
 */
export class ContactGroupsApi
  extends runtime.BaseAPI
  implements ContactGroupsApiInterface
{
  /**
   * Creates a contact group with the given parameters.
   * Create a contact group
   */
  async createContactGroupRaw(
    requestParameters: CreateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<APIResponse>> {
    if (
      requestParameters.name === null ||
      requestParameters.name === undefined
    ) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling createContactGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.name !== undefined) {
      formParams.append('name', requestParameters.name as any);
    }

    if (requestParameters.emailAddresses) {
      formParams.append(
        'email_addresses',
        requestParameters.emailAddresses.join(
          runtime.COLLECTION_FORMATS['csv'],
        ),
      );
    }

    if (requestParameters.integrations) {
      formParams.append(
        'integrations',
        requestParameters.integrations.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    if (requestParameters.mobileNumbers) {
      formParams.append(
        'mobile_numbers',
        requestParameters.mobileNumbers.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    if (requestParameters.pingUrl !== undefined) {
      formParams.append('ping_url', requestParameters.pingUrl as any);
    }

    const response = await this.request(
      {
        path: `/contact-groups`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      APIResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a contact group with the given parameters.
   * Create a contact group
   */
  async createContactGroup(
    requestParameters: CreateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<APIResponse> {
    const response = await this.createContactGroupRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Deletes a contact group with the given id.
   * Delete a contact group
   */
  async deleteContactGroupRaw(
    requestParameters: DeleteContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.groupId === null ||
      requestParameters.groupId === undefined
    ) {
      throw new runtime.RequiredError(
        'groupId',
        'Required parameter requestParameters.groupId was null or undefined when calling deleteContactGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/contact-groups/{group_id}`.replace(
          `{${'group_id'}}`,
          encodeURIComponent(String(requestParameters.groupId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a contact group with the given id.
   * Delete a contact group
   */
  async deleteContactGroup(
    requestParameters: DeleteContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteContactGroupRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a contact group with the given id.
   * Retrieve a contact group
   */
  async getContactGroupRaw(
    requestParameters: GetContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ContactGroupResponse>> {
    if (
      requestParameters.groupId === null ||
      requestParameters.groupId === undefined
    ) {
      throw new runtime.RequiredError(
        'groupId',
        'Required parameter requestParameters.groupId was null or undefined when calling getContactGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/contact-groups/{group_id}`.replace(
          `{${'group_id'}}`,
          encodeURIComponent(String(requestParameters.groupId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ContactGroupResponseFromJSON(jsonValue),
    );
  }

  /**
   * Returns a contact group with the given id.
   * Retrieve a contact group
   */
  async getContactGroup(
    requestParameters: GetContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<ContactGroupResponse> {
    const response = await this.getContactGroupRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of contact groups for an account.
   * Get all contact groups
   */
  async listContactGroupsRaw(
    requestParameters: ListContactGroupsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ContactGroups>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/contact-groups`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ContactGroupsFromJSON(jsonValue),
    );
  }

  /**
   * Returns a list of contact groups for an account.
   * Get all contact groups
   */
  async listContactGroups(
    requestParameters: ListContactGroupsRequest = {},
    initOverrides?: RequestInit,
  ): Promise<ContactGroups> {
    const response = await this.listContactGroupsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Updates a contact group with the given parameters.
   * Update a contact group
   */
  async updateContactGroupRaw(
    requestParameters: UpdateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.groupId === null ||
      requestParameters.groupId === undefined
    ) {
      throw new runtime.RequiredError(
        'groupId',
        'Required parameter requestParameters.groupId was null or undefined when calling updateContactGroup.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.name !== undefined) {
      formParams.append('name', requestParameters.name as any);
    }

    if (requestParameters.emailAddresses) {
      formParams.append(
        'email_addresses',
        requestParameters.emailAddresses.join(
          runtime.COLLECTION_FORMATS['csv'],
        ),
      );
    }

    if (requestParameters.integrations) {
      formParams.append(
        'integrations',
        requestParameters.integrations.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    if (requestParameters.mobileNumbers) {
      formParams.append(
        'mobile_numbers',
        requestParameters.mobileNumbers.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    if (requestParameters.pingUrl !== undefined) {
      formParams.append('ping_url', requestParameters.pingUrl as any);
    }

    const response = await this.request(
      {
        path: `/contact-groups/{group_id}`.replace(
          `{${'group_id'}}`,
          encodeURIComponent(String(requestParameters.groupId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a contact group with the given parameters.
   * Update a contact group
   */
  async updateContactGroup(
    requestParameters: UpdateContactGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.updateContactGroupRaw(requestParameters, initOverrides);
  }
}
