/* tslint:disable */
/* eslint-disable */
/*
 * StatusCake API
 *
 * Copyright (c) 2023
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.2.0
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

import * as runtime from '../runtime';
import {
  APIError,
  APIErrorFromJSON,
  APIErrorToJSON,
  MonitoringLocations,
  MonitoringLocationsFromJSON,
  MonitoringLocationsToJSON,
} from '../models';

export interface ListPagespeedMonitoringLocationsRequest {
  location?: string;
}

export interface ListUptimeMonitoringLocationsRequest {
  regionCode?: string;
}

/**
 * LocationsApi - interface
 *
 * @export
 * @interface LocationsApiInterface
 */
export interface LocationsApiInterface {
  /**
   * Returns a list of locations detailing server information for pagespeed monitoring servers. This information can be used to create further checks using the API.
   * @summary Get all pagespeed monitoring locations
   * @param {string} [location] Alpha-2 ISO 3166-1 country code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationsApiInterface
   */
  listPagespeedMonitoringLocationsRaw(
    requestParameters: ListPagespeedMonitoringLocationsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<MonitoringLocations>>;

  /**
   * Returns a list of locations detailing server information for pagespeed monitoring servers. This information can be used to create further checks using the API.
   * Get all pagespeed monitoring locations
   */
  listPagespeedMonitoringLocations(
    requestParameters: ListPagespeedMonitoringLocationsRequest,
    initOverrides?: RequestInit,
  ): Promise<MonitoringLocations>;

  /**
   * Returns a list of locations detailing server information for uptime monitoring servers. This information can be used to create further checks using the API.
   * @summary Get all uptime monitoring locations
   * @param {string} [regionCode] Server region code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocationsApiInterface
   */
  listUptimeMonitoringLocationsRaw(
    requestParameters: ListUptimeMonitoringLocationsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<MonitoringLocations>>;

  /**
   * Returns a list of locations detailing server information for uptime monitoring servers. This information can be used to create further checks using the API.
   * Get all uptime monitoring locations
   */
  listUptimeMonitoringLocations(
    requestParameters: ListUptimeMonitoringLocationsRequest,
    initOverrides?: RequestInit,
  ): Promise<MonitoringLocations>;
}

/**
 *
 */
export class LocationsApi
  extends runtime.BaseAPI
  implements LocationsApiInterface
{
  /**
   * Returns a list of locations detailing server information for pagespeed monitoring servers. This information can be used to create further checks using the API.
   * Get all pagespeed monitoring locations
   */
  async listPagespeedMonitoringLocationsRaw(
    requestParameters: ListPagespeedMonitoringLocationsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<MonitoringLocations>> {
    const queryParameters: any = {};

    if (requestParameters.location !== undefined) {
      queryParameters['location'] = requestParameters.location;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/pagespeed-locations`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MonitoringLocationsFromJSON(jsonValue),
    );
  }

  /**
   * Returns a list of locations detailing server information for pagespeed monitoring servers. This information can be used to create further checks using the API.
   * Get all pagespeed monitoring locations
   */
  async listPagespeedMonitoringLocations(
    requestParameters: ListPagespeedMonitoringLocationsRequest = {},
    initOverrides?: RequestInit,
  ): Promise<MonitoringLocations> {
    const response = await this.listPagespeedMonitoringLocationsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of locations detailing server information for uptime monitoring servers. This information can be used to create further checks using the API.
   * Get all uptime monitoring locations
   */
  async listUptimeMonitoringLocationsRaw(
    requestParameters: ListUptimeMonitoringLocationsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<MonitoringLocations>> {
    const queryParameters: any = {};

    if (requestParameters.regionCode !== undefined) {
      queryParameters['region_code'] = requestParameters.regionCode;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/uptime-locations`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MonitoringLocationsFromJSON(jsonValue),
    );
  }

  /**
   * Returns a list of locations detailing server information for uptime monitoring servers. This information can be used to create further checks using the API.
   * Get all uptime monitoring locations
   */
  async listUptimeMonitoringLocations(
    requestParameters: ListUptimeMonitoringLocationsRequest = {},
    initOverrides?: RequestInit,
  ): Promise<MonitoringLocations> {
    const response = await this.listUptimeMonitoringLocationsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
