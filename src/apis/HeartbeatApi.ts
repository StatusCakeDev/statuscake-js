/* tslint:disable */
/* eslint-disable */
/*
 * StatusCake API
 *
 * Copyright (c) 2023
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.2.0
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

import * as runtime from '../runtime';
import {
  APIError,
  APIErrorFromJSON,
  APIErrorToJSON,
  APIResponse,
  APIResponseFromJSON,
  APIResponseToJSON,
  HeartbeatTestResponse,
  HeartbeatTestResponseFromJSON,
  HeartbeatTestResponseToJSON,
  HeartbeatTests,
  HeartbeatTestsFromJSON,
  HeartbeatTestsToJSON,
} from '../models';

export interface CreateHeartbeatTestRequest {
  name: string;
  period: number;
  contactGroups?: Array<string>;
  host?: string;
  paused?: boolean;
  tags?: Array<string>;
}

export interface DeleteHeartbeatTestRequest {
  testId: string;
}

export interface GetHeartbeatTestRequest {
  testId: string;
}

export interface ListHeartbeatTestsRequest {
  status?: ListHeartbeatTestsStatusEnum;
  page?: number;
  limit?: number;
  tags?: string;
  matchany?: boolean;
  nouptime?: boolean;
}

export interface UpdateHeartbeatTestRequest {
  testId: string;
  name?: string;
  period?: number;
  contactGroups?: Array<string>;
  host?: string;
  paused?: boolean;
  tags?: Array<string>;
}

/**
 * HeartbeatApi - interface
 *
 * @export
 * @interface HeartbeatApiInterface
 */
export interface HeartbeatApiInterface {
  /**
   * Creates a heartbeat check with the given parameters.
   * @summary Create a heartbeat check
   * @param {string} name Name of the check
   * @param {number} period Number of seconds since the last ping before the check is considered down
   * @param {Array<string>} [contactGroups] List of contact group IDs
   * @param {string} [host] Name of the hosting provider
   * @param {boolean} [paused] Whether the check should be run
   * @param {Array<string>} [tags] List of tags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeartbeatApiInterface
   */
  createHeartbeatTestRaw(
    requestParameters: CreateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<APIResponse>>;

  /**
   * Creates a heartbeat check with the given parameters.
   * Create a heartbeat check
   */
  createHeartbeatTest(
    requestParameters: CreateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<APIResponse>;

  /**
   * Deletes a heartbeat check with the given id.
   * @summary Delete a heartbeat check
   * @param {string} testId Heartbeat check ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeartbeatApiInterface
   */
  deleteHeartbeatTestRaw(
    requestParameters: DeleteHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Deletes a heartbeat check with the given id.
   * Delete a heartbeat check
   */
  deleteHeartbeatTest(
    requestParameters: DeleteHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<void>;

  /**
   * Returns a heartbeat check with the given id.
   * @summary Retrieve a heartbeat check
   * @param {string} testId Heartbeat check ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeartbeatApiInterface
   */
  getHeartbeatTestRaw(
    requestParameters: GetHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<HeartbeatTestResponse>>;

  /**
   * Returns a heartbeat check with the given id.
   * Retrieve a heartbeat check
   */
  getHeartbeatTest(
    requestParameters: GetHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<HeartbeatTestResponse>;

  /**
   * Returns a list of heartbeat checks for an account.
   * @summary Get all heartbeat checks
   * @param {'down' | 'up'} [status] Heartbeat check status
   * @param {number} [page] Page of results
   * @param {number} [limit] The number of heartbeat checks to return per page
   * @param {string} [tags] Comma separated list of tags assocaited with a check
   * @param {boolean} [matchany] Include heartbeat checks in response that match any specified tag or all tags
   * @param {boolean} [nouptime] Do not calculate uptime percentages for results
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeartbeatApiInterface
   */
  listHeartbeatTestsRaw(
    requestParameters: ListHeartbeatTestsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<HeartbeatTests>>;

  /**
   * Returns a list of heartbeat checks for an account.
   * Get all heartbeat checks
   */
  listHeartbeatTests(
    requestParameters: ListHeartbeatTestsRequest,
    initOverrides?: RequestInit,
  ): Promise<HeartbeatTests>;

  /**
   * Updates a heartbeat check with the given parameters.
   * @summary Update a heartbeat check
   * @param {string} testId Heartbeat check ID
   * @param {string} [name] Name of the check
   * @param {number} [period] Number of seconds since the last ping before the check is considered down
   * @param {Array<string>} [contactGroups] List of contact group IDs
   * @param {string} [host] Name of the hosting provider
   * @param {boolean} [paused] Whether the check should be run
   * @param {Array<string>} [tags] List of tags
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeartbeatApiInterface
   */
  updateHeartbeatTestRaw(
    requestParameters: UpdateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>>;

  /**
   * Updates a heartbeat check with the given parameters.
   * Update a heartbeat check
   */
  updateHeartbeatTest(
    requestParameters: UpdateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<void>;
}

/**
 *
 */
export class HeartbeatApi
  extends runtime.BaseAPI
  implements HeartbeatApiInterface
{
  /**
   * Creates a heartbeat check with the given parameters.
   * Create a heartbeat check
   */
  async createHeartbeatTestRaw(
    requestParameters: CreateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<APIResponse>> {
    if (
      requestParameters.name === null ||
      requestParameters.name === undefined
    ) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling createHeartbeatTest.',
      );
    }

    if (
      requestParameters.period === null ||
      requestParameters.period === undefined
    ) {
      throw new runtime.RequiredError(
        'period',
        'Required parameter requestParameters.period was null or undefined when calling createHeartbeatTest.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.name !== undefined) {
      formParams.append('name', requestParameters.name as any);
    }

    if (requestParameters.period !== undefined) {
      formParams.append('period', requestParameters.period as any);
    }

    if (requestParameters.contactGroups) {
      formParams.append(
        'contact_groups',
        requestParameters.contactGroups.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    if (requestParameters.host !== undefined) {
      formParams.append('host', requestParameters.host as any);
    }

    if (requestParameters.paused !== undefined) {
      formParams.append('paused', requestParameters.paused as any);
    }

    if (requestParameters.tags) {
      formParams.append(
        'tags',
        requestParameters.tags.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    const response = await this.request(
      {
        path: `/heartbeat`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      APIResponseFromJSON(jsonValue),
    );
  }

  /**
   * Creates a heartbeat check with the given parameters.
   * Create a heartbeat check
   */
  async createHeartbeatTest(
    requestParameters: CreateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<APIResponse> {
    const response = await this.createHeartbeatTestRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Deletes a heartbeat check with the given id.
   * Delete a heartbeat check
   */
  async deleteHeartbeatTestRaw(
    requestParameters: DeleteHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.testId === null ||
      requestParameters.testId === undefined
    ) {
      throw new runtime.RequiredError(
        'testId',
        'Required parameter requestParameters.testId was null or undefined when calling deleteHeartbeatTest.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/heartbeat/{test_id}`.replace(
          `{${'test_id'}}`,
          encodeURIComponent(String(requestParameters.testId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes a heartbeat check with the given id.
   * Delete a heartbeat check
   */
  async deleteHeartbeatTest(
    requestParameters: DeleteHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteHeartbeatTestRaw(requestParameters, initOverrides);
  }

  /**
   * Returns a heartbeat check with the given id.
   * Retrieve a heartbeat check
   */
  async getHeartbeatTestRaw(
    requestParameters: GetHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<HeartbeatTestResponse>> {
    if (
      requestParameters.testId === null ||
      requestParameters.testId === undefined
    ) {
      throw new runtime.RequiredError(
        'testId',
        'Required parameter requestParameters.testId was null or undefined when calling getHeartbeatTest.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/heartbeat/{test_id}`.replace(
          `{${'test_id'}}`,
          encodeURIComponent(String(requestParameters.testId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HeartbeatTestResponseFromJSON(jsonValue),
    );
  }

  /**
   * Returns a heartbeat check with the given id.
   * Retrieve a heartbeat check
   */
  async getHeartbeatTest(
    requestParameters: GetHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<HeartbeatTestResponse> {
    const response = await this.getHeartbeatTestRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of heartbeat checks for an account.
   * Get all heartbeat checks
   */
  async listHeartbeatTestsRaw(
    requestParameters: ListHeartbeatTestsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<HeartbeatTests>> {
    const queryParameters: any = {};

    if (requestParameters.status !== undefined) {
      queryParameters['status'] = requestParameters.status;
    }

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit;
    }

    if (requestParameters.tags !== undefined) {
      queryParameters['tags'] = requestParameters.tags;
    }

    if (requestParameters.matchany !== undefined) {
      queryParameters['matchany'] = requestParameters.matchany;
    }

    if (requestParameters.nouptime !== undefined) {
      queryParameters['nouptime'] = requestParameters.nouptime;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/heartbeat`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      HeartbeatTestsFromJSON(jsonValue),
    );
  }

  /**
   * Returns a list of heartbeat checks for an account.
   * Get all heartbeat checks
   */
  async listHeartbeatTests(
    requestParameters: ListHeartbeatTestsRequest = {},
    initOverrides?: RequestInit,
  ): Promise<HeartbeatTests> {
    const response = await this.listHeartbeatTestsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Updates a heartbeat check with the given parameters.
   * Update a heartbeat check
   */
  async updateHeartbeatTestRaw(
    requestParameters: UpdateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.testId === null ||
      requestParameters.testId === undefined
    ) {
      throw new runtime.RequiredError(
        'testId',
        'Required parameter requestParameters.testId was null or undefined when calling updateHeartbeatTest.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'application/x-www-form-urlencoded' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.name !== undefined) {
      formParams.append('name', requestParameters.name as any);
    }

    if (requestParameters.period !== undefined) {
      formParams.append('period', requestParameters.period as any);
    }

    if (requestParameters.contactGroups) {
      formParams.append(
        'contact_groups',
        requestParameters.contactGroups.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    if (requestParameters.host !== undefined) {
      formParams.append('host', requestParameters.host as any);
    }

    if (requestParameters.paused !== undefined) {
      formParams.append('paused', requestParameters.paused as any);
    }

    if (requestParameters.tags) {
      formParams.append(
        'tags',
        requestParameters.tags.join(runtime.COLLECTION_FORMATS['csv']),
      );
    }

    const response = await this.request(
      {
        path: `/heartbeat/{test_id}`.replace(
          `{${'test_id'}}`,
          encodeURIComponent(String(requestParameters.testId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Updates a heartbeat check with the given parameters.
   * Update a heartbeat check
   */
  async updateHeartbeatTest(
    requestParameters: UpdateHeartbeatTestRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.updateHeartbeatTestRaw(requestParameters, initOverrides);
  }
}

/**
 * @export
 * @enum {string}
 */
export enum ListHeartbeatTestsStatusEnum {
  Down = 'down',
  Up = 'up',
}
